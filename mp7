#include "sudoku.h"

//shung5
//ece220
//mp7_sudoku
//version 0.1

//this program is essentially the logic part of the sudoku puzzle
//this piece of code will recursively find the solution to a given input
//if the partial solution the code comes up with doesn't work, it will backtrack and try again


// Procedure: print_sudoku
void print_sudoku(int sudoku[9][9])
{
  int i, j;
  for(i=0; i<9; i++) {
    for(j=0; j<9; j++) {
      printf("%2d", sudoku[i][j]);
    }
    printf("\n");
  }
}

// Procedure: parse_sudoku
void parse_sudoku(const char fpath[], int sudoku[9][9]) {
  FILE *reader = fopen(fpath, "r");
  assert(reader != NULL);
  int i, j;
  for(i=0; i<9; i++) {
    for(j=0; j<9; j++) {
      fscanf(reader, "%d", &sudoku[i][j]);
    }
  }
  fclose(reader);
}

//-------------------------------------------------------------------------------------------------
// Start coding your MP here.
// ------------------------------------------------------------------------------------------------

// Function: is_val_in_row
// Return true if "val" already existed in ith row of array sudoku.
int is_val_in_row(const int val, const int i, const int sudoku[9][9]) { //sudoku format: [row][col]

  assert(i>=0 && i<9); // i = row

  // BEG TODO
int invalid = 0;
int cur_val = val;
int cur_pos; //this tells us where in the row we are
for (cur_pos = 0; cur_pos < 9; cur_pos++)
{
    if (cur_val == sudoku[i][cur_pos])
    {
        invalid = 1;
        break;
    }

}


  return invalid;
  // END TODO
}

// Function: is_val_in_col
// Return true if "val" already existed in jth column of array sudoku.
int is_val_in_col(const int val, const int j, const int sudoku[9][9]) {

  assert(j>=0 && j<9); //j = column

  // BEG TODO
int invalid = 0;
int cur_val = val;
int cur_pos; //this tells us where in the row we are
for (cur_pos = 0; cur_pos < 9; cur_pos++)
{
    if (cur_val == sudoku[cur_pos][j])
    {
        invalid = 1;
        break;
    }

}
  return invalid;
  // END TODO
}

// Function: is_val_in_3x3_zone
// Return true if val already existed in the 3x3 zone corresponding to (i, j)
int is_val_in_3x3_zone(const int val, const int i, const int j, const int sudoku[9][9]) {

  assert(i>=0 && i<9);

  // BEG TODO
 //9 ifs, one for each square area -- inequalities to determine which area
  //within each if, we will use for loops
int invalid = 0;
int cur_val = val;
int cur_pos;
int m; //keeps track of row -- corresponds to i
int n; //keeps track of column -- corresponds to j
// 1 2 3
// 4 5 6
// 7 8 9
if (i>=0 && i <= 2 && j >= 0 && j <= 2) //if in section 1 (above diagram)
{
    for (m = 0; m <= 2 ; m++)
    {
        for (n = 0; n <=2; n++)
        {
            if (cur_val == sudoku[m][n])
            {
                invalid = 1;
                break;
            }
        }
    }
}
if (i>=0 && i <= 2 && j >= 3 && j <= 5) //if in section 2 (above diagram)
{
     for (m = 0; m <= 2 ; m++)
    {
        for (n = 3; n <=5; n++)
        {
            if (cur_val == sudoku[m][n])
            {
                invalid = 1;
                break;
            }
        }
    }
}
if (i>=0 && i <= 2 && j >= 6 && j <= 8) //if in section 3 (above diagram)
{
     for (m = 0; m <= 2 ; m++)
    {
        for (n = 6; n <=8; n++)
        {
            if (cur_val == sudoku[m][n])
            {
                invalid = 1;
                break;
            }
        }
    }
}
if (i>=3 && i <= 5 && j >= 0 && j <= 2) //if in section 4 (above diagram)
{
     for (m = 3; m <= 5 ; m++)
    {
        for (n = 0; n <=2; n++)
        {
            if (cur_val == sudoku[m][n])
            {
                invalid = 1;
                break;
            }
        }
    }
}
if (i>=3 && i <= 5 && j >= 3 && j <= 5) //if in section 5 (above diagram)
{
      for (m = 3; m <= 5 ; m++)
    {
        for (n = 3; n <=5; n++)
        {
            if (cur_val == sudoku[m][n])
            {
                invalid = 1;
                break;
            }
        }
    }
}
if (i>=3 && i <= 5 && j >= 6 && j <= 8) //if in section 6 (above diagram)
{
     for (m = 3; m <= 5 ; m++)
    {
        for (n = 6; n <=8; n++)
        {
            if (cur_val == sudoku[m][n])
            {
                invalid = 1;
                break;
            }
        }
    }
}
if (i>=6 && i <= 8 && j >= 0 && j <= 2) //if in section 7 (above diagram)
{
     for (m = 6; m <= 8 ; m++)
    {
        for (n = 0; n <=2; n++)
        {
            if (cur_val == sudoku[m][n])
            {
                invalid = 1;
                break;
            }
        }
    }
}
if (i>=6 && i <= 8 && j >= 3 && j <= 5) //if in section 8 (above diagram)
{
     for (m = 6; m <= 8 ; m++)
    {
        for (n = 3; n <=5; n++)
        {
            if (cur_val == sudoku[m][n])
            {
                invalid = 1;
                break;
            }
        }
    }
}
if (i>=6 && i <= 8 && j >= 6 && j <= 8) //if in section 9 (above diagram)
{
     for (m = 6; m <= 8 ; m++)
    {
        for (n = 6; n <=8; n++)
        {
            if (cur_val == sudoku[m][n])
            {
                invalid = 1;
                break;
            }
        }
    }
}
  return invalid;
  // END TODO
}

// Function: is_val_valid
// Return true if the val is can be filled in the given entry.
int is_val_valid(const int val, const int i, const int j, const int sudoku[9][9]) {
  if(is_val_in_row(val, i, sudoku)) return 0;
  if(is_val_in_col(val, j, sudoku)) return 0;
  if(is_val_in_3x3_zone(val, i, j, sudoku)) return 0;
  return 1;
}

// Procedure: solve_sudoku
// Solve the given sudoku instance.
int solve_sudoku(int sudoku[9][9]) {

  // BEG TODO.


  return 0;
  // END TODO.
}



