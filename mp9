#include <stdio.h>
#include <stdlib.h>
#include "maze.h"
//shung5
//ece220
//mp9_maze
//version 0.22
//This program basically consists of functions that create a maze board by allocating memory for cells
//then, walls/empty_space are placed within each cell (board is a 2D array)
//using manhattan algorithm, recursively find solution (a way out of the maze)
//the finished maze will be printed out, showing the path taken

/*
 * createMaze -- Creates and fills a maze structure from the given file
 * INPUTS:       fileName - character array containing the name of the maze file
 * OUTPUTS:      None
 * RETURN:       A filled maze structure that represents the contents of the input file
 * SIDE EFFECTS: None
 */
maze_t * createMaze(char * fileName)
{
    // Your code here. Make sure to replace following line with your own code.
   FILE *in_file;
   int w, h;
   int i, j;
   in_file = fopen(fileName, "r");
     if (in_file == NULL)
    {
        return 0;
    }
   fscanf(in_file, "%d %d", &w, &h);
    maze_t* maze = (maze_t*)malloc(sizeof(maze_t));
    maze->width = w;
    maze->height = h;
    maze->cells = (char**)malloc(h*sizeof(char));
    for (i = 0; i< h; i++)
    {
        maze->cells[i]=(char*)malloc(w*sizeof(char));
    }
    for (i = 0; i < h; i++)
    {
        for (j = 0; j < w; j++)
        {
            fscanf(in_file,"%c",&maze->cells[h][w]);
        }
    }
     for (i = 0; i < h; i++)
    {
        for (j = 0; j < w; j++)
        {
            if (maze->cells[i][j]==START)
            {
            maze->startColumn = j;
            maze->startRow = i;
            break;
            }
        }
    }
    for (i = 0; i < h; i++)
    {
        for (j = 0; j < w; j++)
        {
            if (maze->cells[i][j]==END)
            {
            maze->endColumn = j;
            maze->endRow = i;
            break;
            }
        }
    }
    fclose(in_file);

    return maze;
}

/*
 * destroyMaze -- Frees all memory associated with the maze structure, including the structure itself
 * INPUTS:        maze -- pointer to maze structure that contains all necessary information
 * OUTPUTS:       None
 * RETURN:        None
 * SIDE EFFECTS:  All memory that has been allocated for the maze is freed
 */
void destroyMaze(maze_t * maze)
{
    // Your code here.
    free(maze->cells);
    free(maze);
}

/*
 * printMaze --  Prints out the maze in a human readable format (should look like examples)
 * INPUTS:       maze -- pointer to maze structure that contains all necessary information
 *               width -- width of the maze
 *               height -- height of the maze
 * OUTPUTS:      None
 * RETURN:       None
 * SIDE EFFECTS: Prints the maze to the console
 */
void printMaze(maze_t * maze)
{
    // Your code here.
    int rows = maze->height;
    int cols = maze->width;
    int i, j;
    for (i = 0; i < rows; i++)
    {
        for (j = 0; j < cols; j++)
        {
            if (j!=cols-1)
            printf("%c",maze->cells[i][j]);
            if (j==cols-1)
            printf("%c\n",maze->cells[i][j]);
        }
    }
}

/*
 * solveMazeManhattanDFS -- recursively solves the maze using depth first search and a manhattan distance heuristic
 * INPUTS:               maze -- pointer to maze structure with all necessary maze information
 *                       col -- the column of the cell currently beinging visited within the maze
 *                       row -- the row of the cell currently being visited within the maze
 * OUTPUTS:              None
 * RETURNS:              0 if the maze is unsolvable, 1 if it is solved
 * SIDE EFFECTS:         Marks maze cells as visited or part of the solution path
 */
int solveMazeManhattanDFS(maze_t * maze, int col, int row)
{
    // Your code here. Make sure to replace following line with your own code.
int left_dist, right_dist, above_dist, below_dist;
int i,j,end_row,end_col;
int done = 0;
for (i = 0; i<row; i++)
{
    for (j = 0; j <col; j++)
    {
        if (maze->cells[i][j] == END)
        {
            end_row = i;
            end_col = j;
            done = 1;
            break;
        }
    }
    if (done == 1) break;
} //result: we get the specific location of the endpoint, which will be used in the manhattan distance equation

if (maze->cells[row][col]!=EMPTY || row < 0 || col <0 || row >= maze->height || col >= maze->width) //if not an empty cell or out of bounds
    return 0;
if (row==end_row && col == end_col) //base case - if the location equals END location -- we are done
    return 1;

//! 4) set (col, row) as part of the solution path in the maze
maze->cells[row][col] = PATH;
//! manhattan begins here
//we will check one direction at a time
above_dist = abs(end_col - col)+abs(end_row - (row+1));
below_dist = abs(end_col - col)+abs(end_row - (row-1));
left_dist = abs(end_col - (col-1)) + abs(end_row - row);
right_dist = abs(end_col - (col+1)) + abs(end_row - row);

if (above_dist<=below_dist && above_dist<=left_dist && above_dist<=right_dist)
{
    //call above first, then others
    if (solveMazeManhattanDFS(maze,col,row-1)==1)//above
        return 1;
    if (solveMazeManhattanDFS(maze,col,row+1)==1)//below
        return 1;
    if (solveMazeManhattanDFS(maze,col-1,row)==1)//left
        return 1;
    if (solveMazeManhattanDFS(maze,col+1,row)==1)//right
        return 1;

}
if (below_dist<=above_dist && below_dist<=left_dist && below_dist<=right_dist)
{
        //call below first
    if (solveMazeManhattanDFS(maze,col,row+1)==1)//below
        return 1;
    if (solveMazeManhattanDFS(maze,col,row-1)==1)//above
        return 1;
    if (solveMazeManhattanDFS(maze,col-1,row)==1)//left
        return 1;
    if (solveMazeManhattanDFS(maze,col+1,row)==1)//right
        return 1;
}
if (left_dist<=above_dist && left_dist<=below_dist && left_dist<=right_dist)
{
    //call left first
    if (solveMazeManhattanDFS(maze,col-1,row)==1)//left
        return 1;
    if (solveMazeManhattanDFS(maze,col,row+1)==1)//below
        return 1;
    if (solveMazeManhattanDFS(maze,col,row-1)==1)//above
        return 1;
    if (solveMazeManhattanDFS(maze,col+1,row)==1)//right
        return 1;
}
if (right_dist<=above_dist && right_dist<=below_dist && right_dist<=left_dist)
{
    //call right first
    if (solveMazeManhattanDFS(maze,col+1,row)==1)//right
        return 1;
    if (solveMazeManhattanDFS(maze,col-1,row)==1)//left
        return 1;
    if (solveMazeManhattanDFS(maze,col,row+1)==1)//below
        return 1;
    if (solveMazeManhattanDFS(maze,col,row-1)==1)//above
        return 1;

}
//! 5) if (solveMaze(left of (col, row) ) == true) return true
//! 6) if (solveMaze(right of (col, row) ) == true) return true
//! 7) if (solveMaze(up of (col, row) ) == true) return true
//! 8) if (solveMaze(down of (col, row) ) == true) return true
//! 9) unmark (col, row) as part of solution and mark as visited
maze->cells[row][col] = VISITED;

    return 0;
}
