#include <stdio.h>
#include <stdlib.h>
#include "maze.h"
//shung5
//ece220
//mp9_maze
//version 0.99
//This program basically consists of functions that create a maze board by allocating memory for cells
//then, walls/empty_space are placed within each cell (board is a 2D array)
//using manhattan algorithm, recursively find solution (a way out of the maze)
//the finished maze will be printed out, showing the path taken

/*
 * createMaze -- Creates and fills a maze structure from the given file
 * INPUTS:       fileName - character array containing the name of the maze file
 * OUTPUTS:      None
 * RETURN:       A filled maze structure that represents the contents of the input file
 * SIDE EFFECTS: None
 */
maze_t * createMaze(char * fileName)
{
    // Your code here. Make sure to replace following line with your own code.
   FILE *in_file;
   int w, h, space;
   int i, j;
   //char c;
   in_file = fopen(fileName, "r");
     if (in_file == NULL)
    {
        return 0;
    }
   fscanf(in_file, "%d %d %d", &h,&w,&space);
    maze_t* maze = malloc(sizeof(maze_t));
    maze->width = w;
    maze->height = h;
    maze->cells = (char**)malloc(h*sizeof(char*));
    for (i = 0; i< h; i++)
    {
	maze->cells[i]=(char*)malloc(w*sizeof(char));

    }
    for (i = 0; i < h; i++)
    {
        for (j = 0; j <= w; j++)
        {
            fscanf(in_file,"%c",&maze->cells[i][j]);
	    //c = getc(in_file);
	    //maze->cells[i][j] = c;       
	}
    }
     for (i = 0; i < h; i++)
    {
        for (j = 0; j < w; j++)
        {
            if (maze->cells[i][j]==START)
            {
            maze->startColumn = j;
            maze->startRow = i;
            break;
            }
        }
    }
    for (i = 0; i < h; i++)
    {
        for (j = 0; j < w; j++)
        {
            if (maze->cells[i][j]==END)
            {
            maze->endColumn = j;
            maze->endRow = i;
            break;
            }
        }
    }
    fclose(in_file);

    return maze;
}

/*
 * destroyMaze -- Frees all memory associated with the maze structure, including the structure itself
 * INPUTS:        maze -- pointer to maze structure that contains all necessary information
 * OUTPUTS:       None
 * RETURN:        None
 * SIDE EFFECTS:  All memory that has been allocated for the maze is freed
 */
void destroyMaze(maze_t * maze)
{
    // Your code here.
    free(maze->cells);
    free(maze);
}

/*
 * printMaze --  Prints out the maze in a human readable format (should look like examples)
 * INPUTS:       maze -- pointer to maze structure that contains all necessary information
 *               width -- width of the maze
 *               height -- height of the maze
 * OUTPUTS:      None
 * RETURN:       None
 * SIDE EFFECTS: Prints the maze to the console
 */
void printMaze(maze_t * maze)
{
    // Your code here.
    char c;
    int rows, cols;
    rows = maze->height;
    cols = maze->width;
    int i, j;
    for (i = 0; i < rows; i++)
    {
        for (j = 0; j < cols; j++)
        {
            c = (maze->cells)[i][j];
	    if (i == rows-1 && c == '\n')
	    continue;
	    //if (c == '\n')
            //continue;
	    //else if (c == ' ' && j == cols-1)
	    //continue;
	    else
            printf("%c",c);

        }
	printf("\n");
    }
}

/*
 * solveMazeManhattanDFS -- recursively solves the maze using depth first search and a manhattan distance heuristic
 * INPUTS:               maze -- pointer to maze structure with all necessary maze information
 *                       col -- the column of the cell currently beinging visited within the maze
 *                       row -- the row of the cell currently being visited within the maze
 * OUTPUTS:              None
 * RETURNS:              0 if the maze is unsolvable, 1 if it is solved
 * SIDE EFFECTS:         Marks maze cells as visited or part of the solution path
 */
int solveMazeManhattanDFS(maze_t * maze, int col, int row)
{
    // Your code here. Make sure to replace following line with your own code.
int left_dist, right_dist, above_dist, below_dist;
int end_row, end_col;
end_row = maze->endRow;
end_col = maze->endColumn;
if (maze->cells[row][col]==END) //base case - if the location equals END location -- we are done
    return 1;
if (maze->cells[row][col]!=EMPTY || row < 0 || col <0 || row >= maze->height || col >= maze->width) //if not an empty cell or out of bounds
    return 0;

maze->cells[row][col] = PATH;  //! 4) set (col, row) as part of the solution path in the maze
//! manhattan begins here
//we will check one direction at a time
above_dist = abs(end_col - col)+abs(end_row - (row+1));
below_dist = abs(end_col - col)+abs(end_row - (row-1));
left_dist = abs(end_col - (col-1)) + abs(end_row - row);
right_dist = abs(end_col - (col+1)) + abs(end_row - row);
if (left_dist<=above_dist && left_dist<=below_dist && left_dist<=right_dist)
{
    //call left first
    if (solveMazeManhattanDFS(maze,col-1,row)==1)//left
    {
	maze->startColumn = col-1;
        return 1;  //! 5) if (solveMaze(left of (col, row) ) == true) return true
    }
    if (solveMazeManhattanDFS(maze,col,row+1)==1)//below
    {
	maze->startRow = row+1;
        return 1;
    }
    if (solveMazeManhattanDFS(maze,col,row-1)==1)//above
    {
	maze->startRow = row-1;
        return 1;
    }
    if (solveMazeManhattanDFS(maze,col+1,row)==1)//right
    {
	maze->startColumn = col+1;
        return 1;  
    }
}
else if (right_dist<=above_dist && right_dist<=below_dist && right_dist<=left_dist)
{
    //call right first
    if (solveMazeManhattanDFS(maze,col+1,row)==1)//right
    {
	maze->startColumn = col+1;
        return 1;  //! 6) if (solveMaze(right of (col, row) ) == true) return true
    }
    if (solveMazeManhattanDFS(maze,col-1,row)==1)//left
    {
	maze->startColumn = col-1;
        return 1;
    }
    if (solveMazeManhattanDFS(maze,col,row+1)==1)//below
    {
	maze->startRow = row+1;
        return 1;
    }
    if (solveMazeManhattanDFS(maze,col,row-1)==1)//above
    {
	maze->startRow = row-1;
        return 1; 
    }

}
else if (above_dist<=below_dist && above_dist<=left_dist && above_dist<=right_dist)
{
    //call above first, then others
    if (solveMazeManhattanDFS(maze,col,row-1)==1)//above
    {        
	maze->startRow = row-1;	
	return 1;  //! 7) if (solveMaze(up of (col, row) ) == true) return true
    }
    if (solveMazeManhattanDFS(maze,col,row+1)==1)//below
    {
	maze->startRow = row+1;
        return 1;
    }
    if (solveMazeManhattanDFS(maze,col-1,row)==1)//left
    {
	maze->startColumn = col-1; 
        return 1;
    }
    if (solveMazeManhattanDFS(maze,col+1,row)==1)//right
    {
	maze->startColumn = col+1;
        return 1;  
    }

}
else //if (below_dist<=above_dist && below_dist<=left_dist && below_dist<=right_dist)
{
        //call below first
    if (solveMazeManhattanDFS(maze,col,row+1)==1)//below
    {
	maze->startRow = row+1;
        return 1;    //! 8) if (solveMaze(down of (col, row) ) == true) return true
    }
    if (solveMazeManhattanDFS(maze,col,row-1)==1)//above
    {
	maze->startRow = row-1;
        return 1;
    }
    if (solveMazeManhattanDFS(maze,col-1,row)==1)//left
    {
	maze->startColumn = col-1;
        return 1;
    }
    if (solveMazeManhattanDFS(maze,col+1,row)==1)//right
    {
	maze->startColumn = col+1;
        return 1;  
    }
}

maze->cells[row][col] = VISITED; //! 9) unmark (col, row) as part of solution and mark as visited

    return 0;
}
