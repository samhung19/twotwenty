/*
 *
 shung5
 ece220
 mp6
 version 1.1.1

This program has three functions.  The first one takes the number of active neighbors for each cell.
This number is then used to determine whether the current cell should stay alive or die (if alive)
, or resurrect or stay dead (if dead)
It then updates the board.
The last function essentially checks if there are any disparities between the previous board and the updated board.
If there is nothing different or if all of the cells are dead, the game terminates.


 countLiveNeighbor
 * Inputs:
 * board: 1-D array of the current game board. 1 represents a live cell.
 * 0 represents a dead cell
 * boardRowSize: the number of rows on the game board.
 * boardColSize: the number of cols on the game board.
 * row: the row of the cell that needs to count alive neighbors.
 * col: the col of the cell that needs to count alive neighbors.
 * Output:
 * return the number of alive neighbors. There are at most eight neighbors.
 * Pay attention for the edge and corner cells, they have less neighbors.
 */

int countLiveNeighbor(int* board, int boardRowSize, int boardColSize, int row, int col){
int rowsize = boardRowSize;
int colsize = boardColSize;
int endindex = rowsize * colsize - 1; //remember that rows and column indexes start at 0
int totalalive = 0;
int currentpos = row * colsize + col;
int north, south, east, west, northeast, northwest, southeast, southwest; //these are the eight possible neighbors

//check north buddy
north = currentpos - colsize;
if (north >= 0){ //check to see if north neighbor exists
    if (board[north]==1){
        totalalive++;
    }
}
//check south buddy
south = currentpos + colsize;
if (south <= endindex){ //this must be true in order for us to check the following conditional
    if (board[south]==1){ //above must be true in order for this case
        totalalive++;
    }
}
//check east buddy
east = currentpos + 1;
if (east <= endindex){
    if (currentpos%colsize != (colsize-1) && board[east] == 1){ //check to see if the current cell is a right edge cell
        totalalive++;
         }
}
//check west buddy
west = currentpos - 1;
if (west >= 0){
    if (currentpos%colsize!=0 && board[west]==1){ //check to see if the current cell is left edge cell
        totalalive++;
            }
}
//check northeast buddy
northeast = currentpos - (colsize -1);
if (northeast >= 0){ //if in range
    if (currentpos%colsize!=(colsize - 1) && board[northeast]==1){ //check to see if right edge cell
            totalalive++;
        }
}
//check northwest buddy
northwest = currentpos - (colsize + 1);
if (northwest >= 0){
    if (currentpos%colsize!=0 && board[northwest]==1){
            totalalive++;
        }
    }
//check southeast buddy
southeast = currentpos + (colsize + 1);
if (southeast <= endindex){
    if (currentpos%colsize != (colsize - 1) && board[southeast]==1){ //check for right edge cell
           totalalive++;
        }

}
//check southwest buddy
southwest = currentpos + (colsize-1);
if (southwest <= endindex){
    if (currentpos%colsize!=0 && board[southwest]==1){
            totalalive++;
        }
    }

return totalalive;
}



/*
 * Update the game board to the next step.
 * Input:
 * board: 1-D array of the current game board. 1 represents a live cell.
 * 0 represents a dead cell
 * boardRowSize: the number of rows on the game board.
 * boardColSize: the number of cols on the game board.
 * Output: board is updated with new values for next step.
 */
void updateBoard(int* board, int boardRowSize, int boardColSize) {
int i = 0;
int j = 0;
int k = 0;
int rowsize = boardRowSize;
int colsize = boardColSize;
int temp_board[boardRowSize*boardColSize];
for(k=0;k<boardRowSize*boardColSize;++k) {
    temp_board[k] = board[k];
} //temp is created in order to preserve board while we update values remotely on temp
int liveneighbors=0;
for (i = 0; i < rowsize; i++){ //keeps track of row
    for (j = 0; j < colsize; j++){ //keeps track of column
            liveneighbors = countLiveNeighbor(board, rowsize, colsize, i, j);
            if (board[i*colsize+j]==1){ //if alive
                if (liveneighbors!=2 && liveneighbors!=3  ){ //dead condition
                    temp_board[i*colsize+j] = 0;
                }
            }
            if (board[i*colsize+j]==0){ //if dead
                if (liveneighbors==3){ //if dead cell has exactly three neighbors
                    temp_board[i*colsize+j] = 1;
                }
            }

        }
    }  //temp now has all the updated values
for(k=0;k<boardRowSize*boardColSize;++k) {
    board[k] = temp_board[k];
}  //time to give these values back to board

//since function is a void, no need to return anything
}





/*
 * aliveStable
 * Checks if the alive cells stay the same for next step
 * board: 1-D array of the current game board. 1 represents a live cell.
 * 0 represents a dead cell
 * boardRowSize: the number of rows on the game board.
 * boardColSize: the number of cols on the game board.
 * Output: return 1 if the alive cells for next step is exactly the same with
 * current step or there is no alive cells at all.
 * return 0 if the alive cells change for the next step.
 */
int aliveStable(int* board, int boardRowSize, int boardColSize){




int k, same = 1;
int temp_board[boardRowSize*boardColSize];

for(k=0;k<boardRowSize*boardColSize;k++) {
    temp_board[k] = board[k];
}
updateBoard(temp_board,boardRowSize, boardColSize);
for(k=0;k<boardRowSize*boardColSize;k++) {
    if(board[k]!=temp_board[k]) {
        same = 0;
        break;
    }
}
return same;




}





